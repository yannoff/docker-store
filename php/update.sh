#!/bin/bash
#
# @package php
# @author  Yannoff <https://github.com/yannoff>
# @license MIT
#

generate_context(){
    local version
    version=$1

    cp -r hooks/ ${version}
    
    cd ${version}
    
    source .env
    
    cat > ${ENTRYPOINT} <<TEMPLATE
#!/bin/sh
#
# This file is auto-generated by update.sh
#
# @package php
# @author  Yannoff <https://github.com/yannoff>
# @license MIT
#
set -e

# first arg is \`-f\` or \`--some-option\`
if [ "\${1#-}" != "\$1" ]; then
    set -- ${PHPBIN} "\$@"
fi

exec "\$@"
TEMPLATE
    
    chmod +x ${ENTRYPOINT}

    cat > Dockerfile <<TEMPLATE
#
# This file is auto-generated by update.sh
#
# @package php
# @author  Yannoff <https://github.com/yannoff>
# @license MIT
#

FROM ${FROM}

MAINTAINER Yannoff <https://github.com/yannoff>

COPY ${ENTRYPOINT} /usr/local/bin/

RUN apk --no-cache add ${PHPPKG} ${PREFIX}-pdo ${PREFIX}-pdo_mysql ${PREFIX}-pdo_pgsql ${PREFIX}-intl ${PREFIX}-curl ${PREFIX}-json ${PREFIX}-opcache ${PREFIX}-xml ${PREFIX}-bcmath; \\
    \\
    ln -s /usr/bin/${PHPBIN} /usr/bin/${CMD} 2>/dev/null || true

EXPOSE ${PORT}

CMD [ "${PHPBIN}" ]

ENTRYPOINT [ "${ENTRYPOINT}" ]

WORKDIR [ "/var/www/html" ]

TEMPLATE

    cd - >/dev/null 2>&1
}

if [ $# -eq 0 ]
then
    printf "Usage: %s <version> [<version> [<version>]]\n" $0
    exit 1
fi

for v in "$@"
do
    printf "Generating dockerfile for version %s..." ${v}
    mkdir -p $v 2>/dev/null
    generate_context $v
    printf "\033[01;32mOK\033[00m\n"
    if [ "latest" = "$v" ]
    then
        printf "Copying latest version to root Dockerfile..."
        cp latest/Dockerfile . 2>/dev/null
        printf "\033[01;32mOK\033[00m\n"
    fi
done
